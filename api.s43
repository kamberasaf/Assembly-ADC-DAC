#include "bsp.h"  
;-------------------------------------------------------------------------------
DIV16bit        MACRO   Divided,Divisor   ; left/right
                LOCAL   L1,L2,L3          ; for multiple use
                mov     #17,R9
                clr     R8                ; Quotient register
                mov.w   Divided,R13       ; Devided registers is R5,R4
                clr     R5
                mov.w   Divisor,R6        ; Divisor registers is R6

L3              rla     R8
L1              dec     R9
                jz      L2
                rla     R13
                rlc     R5
                cmp     R6,R5
                jlo     L3
                sub     R6,R5
                setc
                rlc     R8
                jmp     L1

L2              ;mov.w   R8,Quotient
                ;mov.w   R5,Remainder
                ENDM
                
;-------------------------------------------------------------------------------
;-------------MULTI MACRO--------------------------------------------

MULT            MACRO     Number,Times
                LOCAL     L4
                CLR       R14
                mov       Times, R9
L4              add       Number, R14    
                dec       R9
                JNZ       L4
                ENDM

;-------------MULTI MACRO--------------------------------------------
TranASCII       MACRO     Origin_Num
                MOV       Origin_Num, R7
                ADD       #0x30, R7
                MOV       R7, Origin_Num
                ENDM

                MODULE     API
                PUBLIC     FindExtremas,CalcAvg,FreqOut
                EXTERN     LCDConfig,LCD_CMD,LCDClear,LCDCursorTo1,margin
                EXTERN     LCDCursorOff,LCDCursorOn,LCDCursorR,LCDCursorL
                EXTERN     LCDCursorTo17,LCDPrintChar,Task3state
                EXTERN     state,poll_delay,counter,VoltDigitCounter,Stop_Timer
                EXTERN     originFlag,ADC_Start,State2Counter,TIMERconfig,ADCconfig

                RSEG       CODE

;==============================================================================
;               State 1 (PB0)  - Global Min and Max Voltage
;==============================================================================

FindExtremas      CALL        #LCDClear
                  CALL        #LCDCursorTo1   ; Move cursor to 1st square
                  CALL        #PrintVmin      
                  CALL        #LCDCursorTo17  ; Move cursor to second row
                  CALL        #PrintVmax

VoltReset         CLR         R10             ; R10 = Max V. (start with Min)
                  mov         #MaxADC, R11    ; R11 = Min V. (start with Max)
VoltMeasure       call        #ADC_Start      ; start conversion and go to sleep
                  cmp         R10, ADC_MEM    ; ADC_MEM - (Our Max Value)
                  jn          IsMin           ; if ADC_MEM < (Our Max Value) jump.
                  mov         ADC_MEM, R10    ; if not, set ADC_MEM = Max Value.

IsMin             cmp         ADC_MEM, R11    ; is MEM lower than known min?
                  jn          DoneMeasure     ; if not - we're done sampling
                  mov         ADC_MEM, R11    ; if yes, set ADC_MEM = New Minimun

DoneMeasure       cmp         #1, state       ; is this my current state?
                  jne         ExitState1
                  dec         counter         ; reduce noise and error values
                  jnz         VoltMeasure
                  mov         #1000, counter  ; reset value to default
                  PUSH        R10             ; Push max value to be printed
                  CALL        #HexToDec
                  CALL        #LCDCursorTo17
                  CALL        #PrintVoltValue
                  PUSH        R11             ; Push min value to be printed
                  CALL        #HexToDec
                  CALL        #LCDCursorTo1
                  CALL        #PrintVoltValue
                  JMP         VoltReset

ExitState1        CALL        #LCDClear
                  RET
;==============================================================================
;                State 2 (PB1) - Find Average Voltage
;==============================================================================

CalcAvg           CALL        #LCDClear       
                  CALL        #LCDCursorTo1   ; Move cursor to 1st square
                  CALL        #PrintVavg
                  NOP

ResetAvg          CMP         #2, state       
                  JNZ         ExitFindAverage 
                  CLR         R10             ; R10 = Sampling Sum.
                  CLR         R11             ; R11 = Carry Counter.

State2Loop        CALL        #ADC_Start
                  ADD         ADC_MEM, R10
                  jc          Carry
DecForLoop        DEC         State2Counter    ; we want 2000 samples
                  JNZ         State2Loop
                  MOV         #NumberOfSamples, State2Counter ; reset to default
                  call        #avagcal
                  PUSH        R9              ; prepare avg to be printeds
                  CALL        #HexToDec
                  CALL        #LCDCursorTo1
                  CALL        #PrintVoltValue
                  JMP         ResetAvg

ExitFindAverage   CALL        #LCDClear
                  RET

Carry             inc         R11
                  jmp         DecForLoop
;==============================================================================
;                State 3 (PB2) - Changing PWM
;==============================================================================
FreqOut           CALL #ADCconfig
State3Loop        CMP  #3,state
                  JNE  ExitFreqOut
                  CLR  R10    
                  CLR  R11
                  CALL #ADC_Start
                  ADD  ADC_MEM, R10  ; T0
                  CALL #ADC_Start
                  ADD  ADC_MEM, R11  ; T1
                  SUB  R10,R11       ; T1-T0->T1 (R11)
                  MULT R11,#280     ; (T1-T0)(FACTOR=280)
                  MULT R11,#2048    ; (T'1-T'0)(2048)
                  cmp  #3,R11        ;(T1'-T0')>4 ?
                  jge   Freq1K        ; if yes we want 1KHZ freq.
                  add  #3,R11        ;(T1'-T0')<-4?
                  jn   Freq3K        ; if yes we want 3KHZ freq.
                  jmp  State3Loop

Freq1K            push #524
                  jmp  PWM

Freq3K            push #58
                  jmp  PWM
      
PWM                pop      R4               ;return address
                   pop      R5               ;value          
                   bis.b    #0x08,PWMPort    ; PWM ~ 1   , 5cycles
                   mov      R5,R12          ; 2cycles            
loop_one           dec      R12              ; 1cycle
                   jnz      loop_one         ; 2cycle
           
                   bic.b    #0x08,PWMPort    ; PWM ~ 0   , 5cycles
                   mov      R5,R12          ; 2cycles
loop_zero          dec      R12              ; 1cycle
                   jnz      loop_zero        ; 2cycle
                   jmp  State3Loop     ; Let's calculate again.
    
ExitFreqOut       ret  

;===============================================================================
;                sub-service routines
;===============================================================================
PrintVmin         PUSH #'V'
                  CALL #LCDPrintChar
                  PUSH #'m'
                  CALL #LCDPrintChar
                  PUSH #'i'
                  CALL #LCDPrintChar
                  PUSH #'n'
                  CALL #LCDPrintChar
                  PUSH #'='
                  CALL #LCDPrintChar
                  CALL #LCDCursorR
                  PUSH #'.'
                  CALL #LCDPrintChar
                  
                  CALL #LCDCursorR
                  CALL #LCDCursorR
                  
                  PUSH #'['
                  CALL #LCDPrintChar
                  PUSH #'v'
                  CALL #LCDPrintChar
                  PUSH #']'
                  CALL #LCDPrintChar
                  RET

PrintVmax         PUSH #'V'
                  CALL #LCDPrintChar
                  PUSH #'m'
                  CALL #LCDPrintChar
                  PUSH #'a'
                  CALL #LCDPrintChar
                  PUSH #'x'
                  CALL #LCDPrintChar
                  PUSH #'='
                  CALL #LCDPrintChar
                  CALL #LCDCursorR
                  PUSH #'.'
                  CALL #LCDPrintChar

                  CALL #LCDCursorR
                  CALL #LCDCursorR

                  PUSH #'['
                  CALL #LCDPrintChar
                  PUSH #'v'
                  CALL #LCDPrintChar
                  PUSH #']'
                  CALL #LCDPrintChar
                  RET

PrintVavg         PUSH #'V'
                  CALL #LCDPrintChar
                  PUSH #'a'
                  CALL #LCDPrintChar
                  PUSH #'v'
                  CALL #LCDPrintChar
                  PUSH #'g'
                  CALL #LCDPrintChar
                  PUSH #'='
                  CALL #LCDPrintChar
                  CALL #LCDCursorR
                  PUSH #'.'
                  CALL #LCDPrintChar

                  CALL #LCDCursorR
                  CALL #LCDCursorR

                  PUSH #'['
                  CALL #LCDPrintChar
                  PUSH #'v'
                  CALL #LCDPrintChar
                  PUSH #']'
                  CALL #LCDPrintChar
                  RET

HexToDec          DINT                                        
                  POP       R4                      ; Return Address
                  POP       R5                      ; R5 = Print Value
ConvertLoop       DIV16bit  R5, #VoltRatio          ; 1/286 = Delta V
                  PUSH      R8                      ; X.YZ, push X first than Y and Z.
                  MULT      R5,#10                  ; MULTIPLY remainder by 10
                  MOV       R14,R5                  ; R14=10*R5
                  DEC       VoltDigitCounter        ; 3
                  JNZ       ConvertLoop
                  MOV       #3, VoltDigitCounter
                  PUSH      R4
                  EINT
                  RET

PrintVoltValue    DINT
                  POP R12                     ; Return Address
                  POP R15                     ; 1/100
                  POP R13                     ; 1/10
                  POP R14                     ; 1
                  TranASCII R15
                  TranASCII R13
                  TranASCII R14
                  CALL #LCDCursorR
                  CALL #LCDCursorR
                  CALL #LCDCursorR
                  CALL #LCDCursorR
                  CALL #LCDCursorR
                  PUSH R14
                  CALL #LCDPrintChar
                  CALL #LCDCursorR
                  PUSH R13
                  CALL #LCDPrintChar
                  PUSH R15
                  CALL #LCDPrintChar
                  PUSH R12
                  EINT
                  RET


avagcal           mov.w #11,R6    ; why 11
loop              rrc R11         ; Carry
                  rrc R10         ; Sum
                  dec R6
                  jnz loop
                  mov R10,R9
                  ret

                  ENDMOD
                  END